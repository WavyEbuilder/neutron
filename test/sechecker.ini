# SPDX-FileCopyrightText: 2025 Rahul Sandhu <nvraxn@gmail.com>
# SPDX-License-Identifier: MIT

# Lint policy to mitigate unintentionally giving domains superfluous privileged access.

[PRIVILEGE-load_policy]
check_type = assert_te
desc = Verify SELinux policy can be loaded only by expected domains.
tclass = security
perms = load_policy
exempt_source = selinux.unconfined.typeattr # SELinux unconfined subsystem

[PRIVILEGE-setbool]
check_type = assert_te
desc = Verify SELinux Booleans can be changed only by expected domains.
tclass = security
perms = setbool
exempt_source = selinux.unconfined.typeattr # SELinux unconfined subsystem

[PRIVILEGE-setenforce]
check_type = assert_te
desc = Verify only expected domains can set the SELinux enforcing mode.
tclass = security
perms = setenforce
exempt_source = selinux.unconfined.typeattr # SELinux unconfined subsystem

[PRIVILEGE-CAP_SYS_MODULE]
check_type = assert_te
desc = Verify only expected domains have CAP_SYS_MODULE (kernel module capability).
tclass = capability
perms = sys_module
exempt_source = sys.unconfined.typeattr # System unconfined subsystem

[PRIVILEGE-module_load]
check_type = assert_te
desc = Verify only expected domains can directly load kernel modules.
tclass = system
perms = module_load
exempt_source = sys.unconfined.typeattr # System unconfined subsystem

[PRIVILEGE-CAP_SYS_ADMIN]
check_type = assert_te
desc = Verify only expected domains have CAP_SYS_ADMIN
tclass = capability
perms = sys_admin
exempt_source = mount.subj
                subj.unconfined.typeattr # Subject unconfined subsystem

[PRIVILEGE-CAP_SYS_RAWIO]
check_type = assert_te
desc = Verify only expected domains can use CAP_SYS_RAWIO
tclass = capability
perms = sys_rawio
exempt_source = mount.subj
                subj.unconfined.typeattr # Subject unconfined subsystem

[PRIVILEGE-CAP_NET_ADMIN]
check_type = assert_te
desc = Verify only expected domains can use CAP_NET_ADMIN.
tclass = capability
perms = net_admin
exempt_source = subj.unconfined.typeattr # Subject unconfined subsystem
