;; neutron - Next-generation system SELinux policy
;; Copyright (C) 2025 Rahul Sandhu <nvraxn@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License, as published by
;; the Free Software Foundation, either version 3 of the License, or (at your
;; option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

(block mime

  (block data

    (filecon "/usr/lib/file" dir file_context)
    (filecon "/usr/lib/file/.*" any file_context)

    (filecon "/usr/lib/mime" dir file_context)
    (filecon "/usr/lib/mime/.*" any file_context)

    (filecon "/usr/share/file" dir file_context)
    (filecon "/usr/share/file/.*" any file_context)

    (filecon "/usr/share/mime" dir file_context)
    (filecon "/usr/share/mime/.*" any file_context)

    (macro data_file_type_transition_file ((type ARG1))
           (call .data.file_type_transition
                 (ARG1 file dir "file"))
           (call .data.file_type_transition
                 (ARG1 file dir "mime")))

    (macro lib_file_type_transition_file ((type ARG1))
           (call .lib.file_type_transition
                 (ARG1 file dir "file"))
           (call .lib.file_type_transition
                 (ARG1 file dir "mime")))

    (macro map_file_files ((type ARG1))
           (allow ARG1 file (file (map))))

    (blockinherit .file.data.base_template)
    (blockinherit .file.macro_template_dirs)
    (blockinherit .file.macro_template_files)
    (blockinherit .file.macro_template_lnk_files)

    (block map_file_pattern

      (macro type ((type ARG1))
             (typeattributeset typeattr ARG1))

      (typeattribute typeattr)

      (call map_file_files (typeattr))

      (call search_file_pattern.type (typeattr)))

    (block read_file_pattern

      (macro type ((type ARG1))
             (typeattributeset typeattr ARG1))

      (typeattribute typeattr)

      (call list_file_dirs (typeattr))
      (call read_file_files (typeattr))
      (call read_file_lnk_files (typeattr))

      (call .data.traverse_file_pattern.type (typeattr)))

    (block search_file_pattern

      (macro type ((type ARG1))
             (typeattributeset typeattr ARG1))

      (typeattribute typeattr)

      (call search_file_dirs (typeattr))

      (call .data.traverse_file_pattern.type (typeattr)))))

(in file.unconfined

    (call .mime.data.data_file_type_transition_file (typeattr))
    (call .mime.data.lib_file_type_transition_file (typeattr)))
