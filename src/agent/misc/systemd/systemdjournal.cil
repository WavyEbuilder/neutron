;; SPDX-FileCopyrightText: 2025 Rahul Sandhu <nvraxn@gmail.com>
;; SPDX-License-Identifier: MIT

(in file.unconfined

    (call .systemd.journal.log.log_file_type_transition_file (typeattr))
    (call .systemd.journal.log.run_file_type_transition_file (typeattr)))

(in systemd.journal

    (macro unix_stream_connect ((type ARG1))
           (call connectto_subj_unix_stream_sockets (ARG1))
           (call run.search_file_dirs (ARG1))
           (call run.write_file_sock_files (ARG1)))

    (blockinherit .sys.agent.template)

    (allow subj self
           (capability (audit_control chown dac_read_search dac_override fowner
                                      setgid setuid sys_admin sys_ptrace)))
    (allow subj self (cap_userns (kill sys_ptrace)))
    (allow subj self (capability2 (syslog)))
    (allow subj self create_netlink_audit_socket)
    (allow subj self create_unix_dgram_socket)
    (allow subj self create_unix_stream_stream_socket)
    (allow subj self (netlink_audit_socket (nlmsg nlmsg_write)))

    (call conf.list_file_dirs (subj))
    (call conf.read_file_files (subj))

    (call data.list_file_dirs (subj))
    (call data.read_file_files (subj))

    (call log.log_file_type_transition_file (subj))
    (call log.map_file_files (subj))
    (call log.manage_file_dirs (subj))
    (call log.manage_file_files (subj))
    (call log.relabel_file_files (subj))
    (call log.run_file_type_transition_file (subj))

    (call run.map_file_files (subj))
    (call run.manage_file_dirs (subj))
    (call run.manage_file_files (subj))
    (call run.manage_file_sock_files (subj))
    (call run.systemd_run_file_type_transition_file (subj dir "*"))

    (call systemd.conf.search_file_pattern.type (subj))

    (call systemd.credentials.type (subj))
    (call systemd.logconsole.type (subj))
    (call systemd.logparsenv.type (subj))
    (call systemd.notify.type (subj))
    (call systemd.propagate.type (subj))

    (call systemd.run.read_file_files (subj))
    (call systemd.run.read_file_lnk_files (subj))

    (call .bus.read_sysfile_lnk_files (subj))
    (call .bus.search_sysfile_pattern.type (subj))

    (call .caplastcap.read_sysctlfile_pattern.type (subj))

    (call .cgroup.getattr_fs_pattern.type (subj))
    (call .cgroup.list_fs_dirs (subj))

    (call .cgroupfile.list_all_dirs (subj))

    (call .class.traverse_sysfile_pattern.type (subj))

    (call .crypto.read_sysctlfile_pattern.type (subj))

    (call .dev.traverse_sysfile_pattern.type (subj))

    (call .devices.read_sysfile_files (subj))
    (call .devices.read_sysfile_lnk_files (subj))
    (call .devices.search_sysfile_pattern.type (subj))

    (call .devpts.search_fs_pattern.type (subj))

    (call .firmware.search_sysfile_pattern.type (subj))

    (call .hostname.read_sysctlfile_files (subj))

    (call .kernel.syslogread_system (subj))

    (call .kmsg.read_nodedev_chr_files (subj))

    (call .locale.data.read_file_pattern.type (subj))

    (call .logindefs.read_file_files (subj))

    (call .machineid.read_file_files (subj))

    (call .meminfo.read_procfile_files (subj))

    (call .memory.read_sysfile_files (subj))
    (call .memory.search_sysfile_dirs (subj))

    (call .memorypressure.readwritesetattr.type (subj))

    (call .module.read_sysfile_files (subj))
    (call .module.search_sysfile_pattern.type (subj))

    (call .ns.getattr_fs_files_pattern.type (subj))

    (call .osrelease.read_sysctlfile_pattern.type (subj))

    (call .proc.getattr_fs_pattern.type (subj))

    (call .random.read_nodedev_chr_files (subj))

    (call .random.read_sysctlfile_pattern.type (subj))

    (call .selinux.linked.type (subj))

    (call .subj.ps_all_states (subj))
    (call .subj.signull_all_processes (subj))

    (call .sys.getattr_fs_pattern.type (subj))

    (call .sys.termdev.open_all_chr_files (subj))

    (call .tmp.getattr_fs_pattern.type (subj))

    (call .utmp.run.read_file_files (subj))

    (call .xattr.getattr_fs_pattern.type (subj))

    (block log

      (filecon "/run/log" dir file_context)
      (filecon "/run/log/.*" dir file_context)
      (filecon "/run/log/.*/system.*\.journal.*" file file_context)
      (filecon "/run/log/.*" file ())

      (filecon "/var/log/journal" dir file_context)
      (filecon "/var/log/journal/.*" dir file_context)
      (filecon "/var/log/journal/.*/system.*\.journal.*" file file_context)
      (filecon "/var/log/journal/.*/user.*\.journal.*" file file_context)
      (filecon "/var/log/journal/.*\..*/system.*\.journal.*" file ())

      (macro log_file_type_transition_file ((type ARG1))
             (call .log.file_type_transition
                   (ARG1 file dir "journal")))

      (macro map_file_files ((type ARG1))
             (allow ARG1 file (file (map))))

      (macro run_file_type_transition_file ((type ARG1))
             (call .run.file_type_transition
                   (ARG1 file dir "log")))

      (macro watch_file_dirs ((type ARG1))
             (allow ARG1 file (dir (watch))))

      (blockinherit .file.macro_template_dirs)
      (blockinherit .file.macro_template_files)
      (blockinherit .file.macro_template_lnk_files)
      (blockinherit .file.log.base_template)

      (call .mount.mountpoint.type (file))

      (call .rbacsep.exempt.obj.type (file))

      (call .tmp.associate_fs (file))

      (block map_file_pattern

        (macro type ((type ARG1))
               (typeattributeset typeattr ARG1))

        (typeattribute typeattr)

        (call map_file_files (typeattr))

        (call .log.search_file_pattern.type (typeattr)))

      (block read_file_pattern

        (macro type ((type ARG1))
               (typeattributeset typeattr ARG1))

        (typeattribute typeattr)

        (call list_file_dirs (typeattr))
        (call read_file_files (typeattr))
        (call read_file_lnk_files (typeattr))

        (call .log.search_file_pattern.type (typeattr))))

    (block relay_msgs

      (macro type ((type ARG1))
             (typeattributeset typeattr ARG1))

      (typeattribute typeattr)

      (dontaudit typeattr self (capability (net_admin)))

      (call sendto_subj_unix_dgram_sockets (typeattr))

      (call run.search_file_dirs (typeattr))
      (call run.write_file_sock_files (typeattr))

      (call systemd.run.search_file_pattern.type (typeattr))

      (call .console.dontaudit_writeinherited_serialtermdev_chr_files
            (typeattr))

      ;; TODO: can be dropped? Afterall, initramfs should run unconfined.
      ;; systemd in initramfs
      (call .sys.sendto_subj_unix_dgram_sockets (typeattr)))

    (block unit

      (filecon "/usr/lib/systemd/system/syslog\.socket.*" file file_context)
      (filecon
       "/usr/lib/systemd/system/systemd-journal-catalog-update\.service.*"
       file file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald-audit\.socket.*"
               file file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald-dev-log\.socket.*"
               file file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald\.service.*" file
               file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald@.*\.service.*" file
               file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald\.socket.*" file
               file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald@.*\.socket.*" file
               file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald-sync@.*\.service.*"
               file file_context)
      (filecon "/usr/lib/systemd/system/systemd-journald-varlink@.*\.socket.*"
               file file_context)
      (filecon "/usr/lib/systemd/system/systemd-journal-flush\.service.*" file
               file_context)

      (blockinherit .file.unit.template)))

(in after systemd.journal.exec

    (filecon "/usr/lib/systemd/systemd-journald" file file_context))
